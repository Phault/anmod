// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsUIDiscordNotificationsViewModel } from '../model';
import { OmbiCoreModelsUIEmailNotificationsViewModel } from '../model';
import { OmbiCoreModelsUIMattermostNotificationsViewModel } from '../model';
import { OmbiCoreModelsUIMobileNotificationsViewModel } from '../model';
import { OmbiCoreModelsUINewsletterNotificationViewModel } from '../model';
import { OmbiCoreModelsUIPushbulletNotificationViewModel } from '../model';
import { OmbiCoreModelsUIPushoverNotificationViewModel } from '../model';
import { OmbiCoreModelsUISlackNotificationsViewModel } from '../model';
import { OmbiCoreModelsUITelegramNotificationsViewModel } from '../model';
import { OmbiCoreSettingsModelsExternalEmbySettings } from '../model';
import { OmbiCoreSettingsModelsExternalPlexSettings } from '../model';
import { OmbiCoreSettingsModelsLandingPageSettings } from '../model';
import { OmbiModelsAboutViewModel } from '../model';
import { OmbiModelsCronTestModel } from '../model';
import { OmbiModelsCronViewModelBody } from '../model';
import { OmbiModelsJobSettingsViewModel } from '../model';
import { OmbiModelsPresetThemeViewModel } from '../model';
import { OmbiSettingsSettingsModelsAuthenticationSettings } from '../model';
import { OmbiSettingsSettingsModelsCustomizationSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalCouchPotatoSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalDogNzbSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalLidarrSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalRadarrSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalSickRageSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalSonarrSettings } from '../model';
import { OmbiSettingsSettingsModelsIssueSettings } from '../model';
import { OmbiSettingsSettingsModelsJobSettings } from '../model';
import { OmbiSettingsSettingsModelsOmbiSettings } from '../model';
import { OmbiSettingsSettingsModelsUpdateSettings } from '../model';
import { OmbiSettingsSettingsModelsUserManagementSettings } from '../model';
import { OmbiSettingsSettingsModelsVoteSettings } from '../model';
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAboutGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/about`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Authentication Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/authentication`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Authentication settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsAuthenticationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/authentication`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsAuthenticationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsClientidGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/clientid`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/CouchPotato`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the CouchPotatoSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/CouchPotato`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalCouchPotatoSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Customization Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/customization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Customization settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsCustomizationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/customization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsCustomizationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the default language set in Ombi
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDefaultlanguageGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/defaultlanguage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the DogNzbSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/DogNzb`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the DogNzbSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalDogNzbSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/DogNzb`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalDogNzbSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Emby Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/emby`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Emby settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [emby] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyPost(apiKey?: object, emby?: OmbiCoreSettingsModelsExternalEmbySettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/emby`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsExternalEmbySettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(emby !== undefined ? emby : {}) : (emby || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Issues Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/Issues`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsIssueSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsIssueSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/Issues`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsIssueSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesenabledGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/issuesenabled`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the JobSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/jobs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the JobSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsJobSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsJobSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/jobs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsJobSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Landing Page Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpageGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/landingpage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Landing Page settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpagePost(apiKey?: object, settings?: OmbiCoreSettingsModelsLandingPageSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/landingpage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsLandingPageSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/lidarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Lidarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/lidarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalLidarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrenabledGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/lidarrenabled`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the discord Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/discord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the discord notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordPost(apiKey?: object, model?: OmbiCoreModelsUIDiscordNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/discord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIDiscordNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailEnabledGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/email/enabled`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the email notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailPost(apiKey?: object, model?: OmbiCoreModelsUIEmailNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIEmailNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Mattermost Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/mattermost`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the Mattermost notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostPost(apiKey?: object, model?: OmbiCoreModelsUIMattermostNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/mattermost`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIMattermostNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Mobile Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobileGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/mobile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the Mobile notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobilePost(apiKey?: object, model?: OmbiCoreModelsUIMobileNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/mobile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIMobileNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Newsletter Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/newsletter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the Newsletter notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterPost(apiKey?: object, model?: OmbiCoreModelsUINewsletterNotificationViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/newsletter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUINewsletterNotificationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the pushbullet Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the pushbullet notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletPost(apiKey?: object, model?: OmbiCoreModelsUIPushbulletNotificationViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/pushbullet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIPushbulletNotificationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the pushover Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/pushover`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the pushover notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverPost(apiKey?: object, model?: OmbiCoreModelsUIPushoverNotificationViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/pushover`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIPushoverNotificationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the slack Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/slack`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the slack notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackPost(apiKey?: object, model?: OmbiCoreModelsUISlackNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/slack`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUISlackNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the telegram Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/telegram`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves the telegram notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramPost(apiKey?: object, model?: OmbiCoreModelsUITelegramNotificationsViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/notifications/telegram`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUITelegramNotificationsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Ombi settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/ombi`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Ombi settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [ombi] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiPost(apiKey?: object, ombi?: OmbiSettingsSettingsModelsOmbiSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/ombi`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsOmbiSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ombi !== undefined ? ombi : {}) : (ombi || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiResetApiPost(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/ombi/resetApi`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Plex Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/plex`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Plex settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [plex] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexPost(apiKey?: object, plex?: OmbiCoreSettingsModelsExternalPlexSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/plex`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsExternalPlexSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(plex !== undefined ? plex : {}) : (plex || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Radarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/radarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Radarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/radarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalRadarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the SickRage Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRageGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/SickRage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the SickRage settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRagePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/SickRage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalSickRageSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Sonarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/sonarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Sonarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/sonarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalSonarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsCronViewModelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsTestcronPost(apiKey?: object, body?: OmbiModelsCronViewModelBody, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/testcron`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsCronViewModelBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the preset themes available
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsThemesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/themes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Update Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdateGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Update settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdatePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUpdateSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/Update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsUpdateSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the UserManagement Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/UserManagement`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the UserManagement settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUserManagementSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/UserManagement`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsUserManagementSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the Vote Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/vote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsVoteSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVotePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsVoteSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/vote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsVoteSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteenabledGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Settings/voteenabled`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAboutGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsAboutViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsAboutGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Authentication Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsAuthenticationSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsAuthenticationGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Authentication settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsAuthenticationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsAuthenticationPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsClientidGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsClientidGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalCouchPotatoSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsCouchPotatoGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the CouchPotatoSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsCouchPotatoPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Customization Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsCustomizationSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsCustomizationGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Customization settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsCustomizationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsCustomizationPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the default language set in Ombi
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDefaultlanguageGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsDefaultlanguageGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the DogNzbSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalDogNzbSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsDogNzbGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the DogNzbSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalDogNzbSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsDogNzbPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Emby Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreSettingsModelsExternalEmbySettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsEmbyGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Emby settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [emby] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyPost(apiKey?: object, emby?: OmbiCoreSettingsModelsExternalEmbySettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsEmbyPost(apiKey, emby, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Issues Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsIssueSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsIssuesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsIssueSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsIssueSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsIssuesPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesenabledGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsIssuesenabledGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the JobSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsJobSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsJobsGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the JobSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsJobSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsJobSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsJobSettingsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsJobsPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Landing Page Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpageGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreSettingsModelsLandingPageSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsLandingpageGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Landing Page settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpagePost(apiKey?: object, settings?: OmbiCoreSettingsModelsLandingPageSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsLandingpagePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalLidarrSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsLidarrGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Lidarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsLidarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrenabledGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsLidarrenabledGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the discord Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIDiscordNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsDiscordGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the discord notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordPost(apiKey?: object, model?: OmbiCoreModelsUIDiscordNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsDiscordPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailEnabledGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsEmailEnabledGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIEmailNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsEmailGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the email notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailPost(apiKey?: object, model?: OmbiCoreModelsUIEmailNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsEmailPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Mattermost Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIMattermostNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsMattermostGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the Mattermost notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostPost(apiKey?: object, model?: OmbiCoreModelsUIMattermostNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsMattermostPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Mobile Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobileGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIMobileNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsMobileGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the Mobile notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobilePost(apiKey?: object, model?: OmbiCoreModelsUIMobileNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsMobilePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Newsletter Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUINewsletterNotificationViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsNewsletterGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the Newsletter notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterPost(apiKey?: object, model?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsNewsletterPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the pushbullet Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIPushbulletNotificationViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsPushbulletGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the pushbullet notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletPost(apiKey?: object, model?: OmbiCoreModelsUIPushbulletNotificationViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsPushbulletPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the pushover Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIPushoverNotificationViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsPushoverGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the pushover notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverPost(apiKey?: object, model?: OmbiCoreModelsUIPushoverNotificationViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsPushoverPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the slack Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUISlackNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsSlackGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the slack notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackPost(apiKey?: object, model?: OmbiCoreModelsUISlackNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsSlackPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the telegram Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUITelegramNotificationsViewModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsTelegramGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Saves the telegram notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramPost(apiKey?: object, model?: OmbiCoreModelsUITelegramNotificationsViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsNotificationsTelegramPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Ombi settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsOmbiSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsOmbiGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Ombi settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [ombi] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiPost(apiKey?: object, ombi?: OmbiSettingsSettingsModelsOmbiSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsOmbiPost(apiKey, ombi, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiResetApiPost(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsOmbiResetApiPost(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Plex Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreSettingsModelsExternalPlexSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsPlexGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Plex settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [plex] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexPost(apiKey?: object, plex?: OmbiCoreSettingsModelsExternalPlexSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsPlexPost(apiKey, plex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Radarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalRadarrSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsRadarrGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Radarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsRadarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the SickRage Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRageGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalSickRageSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsSickRageGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the SickRage settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRagePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsSickRagePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Sonarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsExternalSonarrSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsSonarrGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Sonarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsSonarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsCronViewModelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsTestcronPost(apiKey?: object, body?: OmbiModelsCronViewModelBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsCronTestModel> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsTestcronPost(apiKey, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the preset themes available
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsThemesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiModelsPresetThemeViewModel>> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsThemesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Update Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdateGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsUpdateSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsUpdateGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Update settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdatePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUpdateSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsUpdatePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the UserManagement Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsUserManagementSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsUserManagementGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the UserManagement settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUserManagementSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsUserManagementPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the Vote Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiSettingsSettingsModelsVoteSettings> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsVoteGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsVoteSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVotePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsVoteSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsVotePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteenabledGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SettingsApiAxiosParamCreator(configuration).settingsVoteenabledGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAboutGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsAboutGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Authentication Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsAuthenticationGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Authentication settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsAuthenticationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsAuthenticationSettings, options?: any) {
            return SettingsApiFp(configuration).settingsAuthenticationPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsClientidGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsClientidGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the CouchPotatoSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsCouchPotatoGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the CouchPotatoSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCouchPotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any) {
            return SettingsApiFp(configuration).settingsCouchPotatoPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Customization Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsCustomizationGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Customization settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsCustomizationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsCustomizationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsCustomizationSettings, options?: any) {
            return SettingsApiFp(configuration).settingsCustomizationPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the default language set in Ombi
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDefaultlanguageGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsDefaultlanguageGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the DogNzbSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsDogNzbGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the DogNzbSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsDogNzbPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalDogNzbSettings, options?: any) {
            return SettingsApiFp(configuration).settingsDogNzbPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Emby Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsEmbyGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Emby settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbySettings} [emby] The emby.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsEmbyPost(apiKey?: object, emby?: OmbiCoreSettingsModelsExternalEmbySettings, options?: any) {
            return SettingsApiFp(configuration).settingsEmbyPost(apiKey, emby, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Issues Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsIssuesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsIssueSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsIssueSettings, options?: any) {
            return SettingsApiFp(configuration).settingsIssuesPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsIssuesenabledGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsIssuesenabledGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the JobSettings Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsJobsGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the JobSettings settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsJobSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsJobsPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsJobSettings, options?: any) {
            return SettingsApiFp(configuration).settingsJobsPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Landing Page Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpageGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsLandingpageGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Landing Page settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsLandingPageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLandingpagePost(apiKey?: object, settings?: OmbiCoreSettingsModelsLandingPageSettings, options?: any) {
            return SettingsApiFp(configuration).settingsLandingpagePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsLidarrGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Lidarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any) {
            return SettingsApiFp(configuration).settingsLidarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Lidarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsLidarrenabledGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsLidarrenabledGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the discord Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsDiscordGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the discord notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsDiscordPost(apiKey?: object, model?: OmbiCoreModelsUIDiscordNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsDiscordPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailEnabledGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsEmailEnabledGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Email Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsEmailGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the email notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsEmailPost(apiKey?: object, model?: OmbiCoreModelsUIEmailNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsEmailPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Mattermost Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsMattermostGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the Mattermost notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMattermostPost(apiKey?: object, model?: OmbiCoreModelsUIMattermostNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsMattermostPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Mobile Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobileGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsMobileGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the Mobile notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsMobilePost(apiKey?: object, model?: OmbiCoreModelsUIMobileNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsMobilePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Newsletter Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsNewsletterGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the Newsletter notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsNewsletterPost(apiKey?: object, model?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsNewsletterPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the pushbullet Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsPushbulletGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the pushbullet notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushbulletPost(apiKey?: object, model?: OmbiCoreModelsUIPushbulletNotificationViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsPushbulletPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the pushover Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsPushoverGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the pushover notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsPushoverPost(apiKey?: object, model?: OmbiCoreModelsUIPushoverNotificationViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsPushoverPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the slack Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsSlackGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the slack notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUISlackNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsSlackPost(apiKey?: object, model?: OmbiCoreModelsUISlackNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsSlackPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the telegram Notification Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsTelegramGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Saves the telegram notification settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsNotificationsTelegramPost(apiKey?: object, model?: OmbiCoreModelsUITelegramNotificationsViewModel, options?: any) {
            return SettingsApiFp(configuration).settingsNotificationsTelegramPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Ombi settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsOmbiGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Ombi settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsOmbiSettings} [ombi] The ombi.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiPost(apiKey?: object, ombi?: OmbiSettingsSettingsModelsOmbiSettings, options?: any) {
            return SettingsApiFp(configuration).settingsOmbiPost(apiKey, ombi, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsOmbiResetApiPost(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsOmbiResetApiPost(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Plex Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsPlexGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Plex settings.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexSettings} [plex] The plex.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsPlexPost(apiKey?: object, plex?: OmbiCoreSettingsModelsExternalPlexSettings, options?: any) {
            return SettingsApiFp(configuration).settingsPlexPost(apiKey, plex, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Radarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsRadarrGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Radarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any) {
            return SettingsApiFp(configuration).settingsRadarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the SickRage Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRageGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsSickRageGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the SickRage settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSickRagePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any) {
            return SettingsApiFp(configuration).settingsSickRagePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Sonarr Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsSonarrGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Sonarr settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any) {
            return SettingsApiFp(configuration).settingsSonarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsCronViewModelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsTestcronPost(apiKey?: object, body?: OmbiModelsCronViewModelBody, options?: any) {
            return SettingsApiFp(configuration).settingsTestcronPost(apiKey, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the preset themes available
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsThemesGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsThemesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Update Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdateGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsUpdateGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Update settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUpdateSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUpdatePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUpdateSettings, options?: any) {
            return SettingsApiFp(configuration).settingsUpdatePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the UserManagement Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsUserManagementGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the UserManagement settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsUserManagementSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsUserManagementPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUserManagementSettings, options?: any) {
            return SettingsApiFp(configuration).settingsUserManagementPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the Vote Settings.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsVoteGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Save the Vote settings.
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsVoteSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVotePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsVoteSettings, options?: any) {
            return SettingsApiFp(configuration).settingsVotePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsVoteenabledGet(apiKey?: object, options?: any) {
            return SettingsApiFp(configuration).settingsVoteenabledGet(apiKey, options)(axios, basePath);
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsAboutGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsAboutGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Authentication Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsAuthenticationGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsAuthenticationGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Authentication settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsAuthenticationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsAuthenticationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsAuthenticationSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsAuthenticationPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsClientidGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsClientidGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the CouchPotatoSettings Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsCouchPotatoGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsCouchPotatoGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the CouchPotatoSettings settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsCouchPotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsCouchPotatoPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Customization Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsCustomizationGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsCustomizationGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Customization settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsCustomizationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsCustomizationPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsCustomizationSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsCustomizationPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the default language set in Ombi
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsDefaultlanguageGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsDefaultlanguageGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the DogNzbSettings Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsDogNzbGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsDogNzbGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the DogNzbSettings settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalDogNzbSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsDogNzbPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalDogNzbSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsDogNzbPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Emby Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsEmbyGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsEmbyGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Emby settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsExternalEmbySettings} [emby] The emby.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsEmbyPost(apiKey?: object, emby?: OmbiCoreSettingsModelsExternalEmbySettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsEmbyPost(apiKey, emby, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Issues Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsIssuesGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsIssuesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Vote settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsIssueSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsIssuesPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsIssueSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsIssuesPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsIssuesenabledGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsIssuesenabledGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the JobSettings Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsJobsGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsJobsGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the JobSettings settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsJobSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsJobsPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsJobSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsJobsPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Landing Page Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsLandingpageGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsLandingpageGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Landing Page settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsLandingPageSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsLandingpagePost(apiKey?: object, settings?: OmbiCoreSettingsModelsLandingPageSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsLandingpagePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Lidarr Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsLidarrGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsLidarrGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Lidarr settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsLidarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Lidarr Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsLidarrenabledGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsLidarrenabledGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the discord Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsDiscordGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsDiscordGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the discord notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIDiscordNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsDiscordPost(apiKey?: object, model?: OmbiCoreModelsUIDiscordNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsDiscordPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Email Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsEmailEnabledGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsEmailEnabledGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Email Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsEmailGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsEmailGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the email notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIEmailNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsEmailPost(apiKey?: object, model?: OmbiCoreModelsUIEmailNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsEmailPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Mattermost Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsMattermostGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsMattermostGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the Mattermost notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIMattermostNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsMattermostPost(apiKey?: object, model?: OmbiCoreModelsUIMattermostNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsMattermostPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Mobile Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsMobileGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsMobileGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the Mobile notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIMobileNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsMobilePost(apiKey?: object, model?: OmbiCoreModelsUIMobileNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsMobilePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Newsletter Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsNewsletterGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsNewsletterGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the Newsletter notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsNewsletterPost(apiKey?: object, model?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsNewsletterPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the pushbullet Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsPushbulletGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsPushbulletGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the pushbullet notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIPushbulletNotificationViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsPushbulletPost(apiKey?: object, model?: OmbiCoreModelsUIPushbulletNotificationViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsPushbulletPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the pushover Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsPushoverGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsPushoverGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the pushover notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIPushoverNotificationViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsPushoverPost(apiKey?: object, model?: OmbiCoreModelsUIPushoverNotificationViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsPushoverPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the slack Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsSlackGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsSlackGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the slack notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUISlackNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsSlackPost(apiKey?: object, model?: OmbiCoreModelsUISlackNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsSlackPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the telegram Notification Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsTelegramGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsTelegramGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Saves the telegram notification settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUITelegramNotificationsViewModel} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsNotificationsTelegramPost(apiKey?: object, model?: OmbiCoreModelsUITelegramNotificationsViewModel, options?: any) {
        return SettingsApiFp(this.configuration).settingsNotificationsTelegramPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Ombi settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsOmbiGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsOmbiGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Ombi settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsOmbiSettings} [ombi] The ombi.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsOmbiPost(apiKey?: object, ombi?: OmbiSettingsSettingsModelsOmbiSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsOmbiPost(apiKey, ombi, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsOmbiResetApiPost(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsOmbiResetApiPost(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Plex Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsPlexGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsPlexGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Plex settings.
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsExternalPlexSettings} [plex] The plex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsPlexPost(apiKey?: object, plex?: OmbiCoreSettingsModelsExternalPlexSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsPlexPost(apiKey, plex, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Radarr Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsRadarrGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsRadarrGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Radarr settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsRadarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the SickRage Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsSickRageGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsSickRageGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the SickRage settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsSickRagePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsSickRagePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Sonarr Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsSonarrGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsSonarrGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Sonarr settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsSonarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiModelsCronViewModelBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsTestcronPost(apiKey?: object, body?: OmbiModelsCronViewModelBody, options?: any) {
        return SettingsApiFp(this.configuration).settingsTestcronPost(apiKey, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the preset themes available
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsThemesGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsThemesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Update Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsUpdateGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsUpdateGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Update settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsUpdateSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsUpdatePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUpdateSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsUpdatePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the UserManagement Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsUserManagementGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsUserManagementGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the UserManagement settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsUserManagementSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsUserManagementPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsUserManagementSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsUserManagementPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the Vote Settings.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsVoteGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsVoteGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Save the Vote settings.
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsVoteSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsVotePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsVoteSettings, options?: any) {
        return SettingsApiFp(this.configuration).settingsVotePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsVoteenabledGet(apiKey?: object, options?: any) {
        return SettingsApiFp(this.configuration).settingsVoteenabledGet(apiKey, options)(this.axios, this.basePath);
    }

}
