// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsRecentlyAddedMovieModel } from '../model';
/**
 * RecentlyAddedApi - axios parameter creator
 * @export
 */
export const RecentlyAddedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the recently added movies for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedMoviesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/RecentlyAdded/movies`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/RecentlyAdded/tv`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days and groups them by season
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGroupedGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/RecentlyAdded/tv/grouped`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecentlyAddedApi - functional programming interface
 * @export
 */
export const RecentlyAddedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the recently added movies for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedMoviesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
            const localVarAxiosArgs = RecentlyAddedApiAxiosParamCreator(configuration).recentlyAddedMoviesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
            const localVarAxiosArgs = RecentlyAddedApiAxiosParamCreator(configuration).recentlyAddedTvGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days and groups them by season
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGroupedGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsRecentlyAddedMovieModel>> {
            const localVarAxiosArgs = RecentlyAddedApiAxiosParamCreator(configuration).recentlyAddedTvGroupedGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecentlyAddedApi - factory interface
 * @export
 */
export const RecentlyAddedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns the recently added movies for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedMoviesGet(apiKey?: object, options?: any) {
            return RecentlyAddedApiFp(configuration).recentlyAddedMoviesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGet(apiKey?: object, options?: any) {
            return RecentlyAddedApiFp(configuration).recentlyAddedTvGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the recently added tv shows for the past 7 days and groups them by season
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentlyAddedTvGroupedGet(apiKey?: object, options?: any) {
            return RecentlyAddedApiFp(configuration).recentlyAddedTvGroupedGet(apiKey, options)(axios, basePath);
        },
    };
};

/**
 * RecentlyAddedApi - object-oriented interface
 * @export
 * @class RecentlyAddedApi
 * @extends {BaseAPI}
 */
export class RecentlyAddedApi extends BaseAPI {
    /**
     * 
     * @summary Returns the recently added movies for the past 7 days
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecentlyAddedApi
     */
    public recentlyAddedMoviesGet(apiKey?: object, options?: any) {
        return RecentlyAddedApiFp(this.configuration).recentlyAddedMoviesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the recently added tv shows for the past 7 days
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecentlyAddedApi
     */
    public recentlyAddedTvGet(apiKey?: object, options?: any) {
        return RecentlyAddedApiFp(this.configuration).recentlyAddedTvGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the recently added tv shows for the past 7 days and groups them by season
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecentlyAddedApi
     */
    public recentlyAddedTvGroupedGet(apiKey?: object, options?: any) {
        return RecentlyAddedApiFp(this.configuration).recentlyAddedTvGroupedGet(apiKey, options)(this.axios, this.basePath);
    }

}
