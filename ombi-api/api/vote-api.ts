// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsUIVoteViewModel } from '../model';
import { OmbiCoreModelsVoteEngineResult } from '../model';
import { OmbiStoreEntitiesVotes } from '../model';
/**
 * VoteApi - axios parameter creator
 * @export
 */
export const VoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Downvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownAlbumByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteDownAlbumByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/down/album/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownMovieByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteDownMovieByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/down/movie/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownTvByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteDownTvByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/down/tv/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the viewmodel to render on the UI
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Vote`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMovieByRequestIdGet(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteMovieByRequestIdGet.');
            }
            const localVarPath = `/api/v1/Vote/movie/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMusicByRequestIdGet(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteMusicByRequestIdGet.');
            }
            const localVarPath = `/api/v1/Vote/music/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteTvByRequestIdGet(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteTvByRequestIdGet.');
            }
            const localVarPath = `/api/v1/Vote/tv/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpAlbumByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteUpAlbumByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/up/album/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpMovieByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteUpMovieByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/up/movie/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpTvByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling voteUpTvByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Vote/up/tv/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoteApi - functional programming interface
 * @export
 */
export const VoteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Downvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteDownAlbumByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Downvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteDownMovieByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Downvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownTvByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteDownTvByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the viewmodel to render on the UI
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsUIVoteViewModel>> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMovieByRequestIdGet(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteMovieByRequestIdGet(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMusicByRequestIdGet(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteMusicByRequestIdGet(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteTvByRequestIdGet(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesVotes>> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteTvByRequestIdGet(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteUpAlbumByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteUpMovieByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Upvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpTvByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsVoteEngineResult> {
            const localVarAxiosArgs = VoteApiAxiosParamCreator(configuration).voteUpTvByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VoteApi - factory interface
 * @export
 */
export const VoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Downvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteDownAlbumByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Downvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteDownMovieByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Downvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteDownTvByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteDownTvByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the viewmodel to render on the UI
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteGet(apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMovieByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteMovieByRequestIdGet(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteMusicByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteMusicByRequestIdGet(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s all the votes for the request id
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteTvByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteTvByRequestIdGet(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upvotes a album
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteUpAlbumByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upvotes a movie
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteUpMovieByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Upvotes a tv show
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUpTvByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return VoteApiFp(configuration).voteUpTvByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
    };
};

/**
 * VoteApi - object-oriented interface
 * @export
 * @class VoteApi
 * @extends {BaseAPI}
 */
export class VoteApi extends BaseAPI {
    /**
     * 
     * @summary Downvotes a album
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteDownAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteDownAlbumByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Downvotes a movie
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteDownMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteDownMovieByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Downvotes a tv show
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteDownTvByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteDownTvByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the viewmodel to render on the UI
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteGet(apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s all the votes for the request id
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteMovieByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteMovieByRequestIdGet(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s all the votes for the request id
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteMusicByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteMusicByRequestIdGet(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s all the votes for the request id
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteTvByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteTvByRequestIdGet(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upvotes a album
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteUpAlbumByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteUpAlbumByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upvotes a movie
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteUpMovieByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteUpMovieByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Upvotes a tv show
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteApi
     */
    public voteUpTvByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return VoteApiFp(this.configuration).voteUpTvByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

}
