// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreEngineRequestEngineResult } from '../model';
import { OmbiCoreModelsRequestQuotaCountModel } from '../model';
import { OmbiCoreModelsRequestsDenyMovieModel } from '../model';
import { OmbiCoreModelsRequestsMovieRequestViewModel } from '../model';
import { OmbiCoreModelsRequestsMovieUpdateModel } from '../model';
import { OmbiCoreModelsRequestsRequestCountModel } from '../model';
import { OmbiCoreModelsRequestsTvRequestViewModel } from '../model';
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from '../model';
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsTvRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from '../model';
import { OmbiModelsDenyTvModel } from '../model';
import { OmbiModelsTvUpdateModel } from '../model';
import { OmbiStoreEntitiesRequestsChildRequests } from '../model';
import { OmbiStoreEntitiesRequestsMovieRequests } from '../model';
import { OmbiStoreEntitiesRequestsTvRequests } from '../model';
/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the count of total requests
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCountGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/count`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the all movie request.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAllDelete(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Approves the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/approve`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsMovieUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified Movie as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/available`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsMovieUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'orderType' is not null or undefined
            if (orderType === null || orderType === undefined) {
                throw new RequiredError('orderType','Required parameter orderType was null or undefined when calling requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'statusType' is not null or undefined
            if (statusType === null || statusType === undefined) {
                throw new RequiredError('statusType','Required parameter statusType was null or undefined when calling requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'availabilityType' is not null or undefined
            if (availabilityType === null || availabilityType === undefined) {
                throw new RequiredError('availabilityType','Required parameter availabilityType was null or undefined when calling requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            const localVarPath = `/api/v1/Request/movie/{count}/{position}/{orderType}/{statusType}/{availabilityType}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"orderType"}}`, encodeURIComponent(String(orderType)))
                .replace(`{${"statusType"}}`, encodeURIComponent(String(statusType)))
                .replace(`{${"availabilityType"}}`, encodeURIComponent(String(availabilityType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the specified movie request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByRequestIdDelete(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestMovieByRequestIdDelete.');
            }
            const localVarPath = `/api/v1/Request/movie/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Denies the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyMovieModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyMovieModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/deny`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsDenyMovieModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Requests a movie.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieRequestViewModel} [movie] The movie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePost(apiKey?: object, movie?: OmbiCoreModelsRequestsMovieRequestViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsMovieRequestViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(movie !== undefined ? movie : {}) : (movie || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsMovieRequests} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePut(apiKey?: object, model?: OmbiStoreEntitiesRequestsMovieRequests, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiStoreEntitiesRequestsMovieRequests" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieRemainingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/remaining`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for a specific movie request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSearchBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling requestMovieSearchBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Request/movie/search/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSubscribeByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestMovieSubscribeByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Request/movie/subscribe/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the total amount of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieTotalGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/total`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified Movie as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/movie/unavailable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsMovieUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestMovieUnsubscribeByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Request/movie/unsubscribe/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvApprovePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/approve`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsTvUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified tv child as available
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvAvailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/available`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsTvUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'orderType' is not null or undefined
            if (orderType === null || orderType === undefined) {
                throw new RequiredError('orderType','Required parameter orderType was null or undefined when calling requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'statusFilterType' is not null or undefined
            if (statusFilterType === null || statusFilterType === undefined) {
                throw new RequiredError('statusFilterType','Required parameter statusFilterType was null or undefined when calling requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'availabilityFilterType' is not null or undefined
            if (availabilityFilterType === null || availabilityFilterType === undefined) {
                throw new RequiredError('availabilityFilterType','Required parameter availabilityFilterType was null or undefined when calling requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            const localVarPath = `/api/v1/Request/tv/{count}/{position}/{orderType}/{statusFilterType}/{availabilityFilterType}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"orderType"}}`, encodeURIComponent(String(orderType)))
                .replace(`{${"statusFilterType"}}`, encodeURIComponent(String(statusFilterType)))
                .replace(`{${"availabilityFilterType"}}`, encodeURIComponent(String(availabilityFilterType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (statusType !== undefined) {
                localVarQueryParameter['statusType'] = statusType;
            }

            if (availabilityType !== undefined) {
                localVarQueryParameter['availabilityType'] = availabilityType;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retuns all children requests for the request id
         * @param {number} requestId The Request Id
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdChildGet(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvByRequestIdChildGet.');
            }
            const localVarPath = `/api/v1/Request/tv/{requestId}/child`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdDelete(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvByRequestIdDelete.');
            }
            const localVarPath = `/api/v1/Request/tv/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the full request object for the specified requestId
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdGet(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvByRequestIdGet.');
            }
            const localVarPath = `/api/v1/Request/tv/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The model.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildByRequestIdDelete(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvChildByRequestIdDelete.');
            }
            const localVarPath = `/api/v1/Request/tv/child/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsChildRequests} [child] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildPut(apiKey?: object, child?: OmbiStoreEntitiesRequestsChildRequests, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/child`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiStoreEntitiesRequestsChildRequests" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(child !== undefined ? child : {}) : (child || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Denies the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsDenyTvModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvDenyPut(apiKey?: object, model?: OmbiModelsDenyTvModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/deny`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsDenyTvModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Requests a tv show/episode/season.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsTvRequestViewModel} [tv] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPost(apiKey?: object, tv?: OmbiCoreModelsRequestsTvRequestViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsTvRequestViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tv !== undefined ? tv : {}) : (tv || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the a specific tv request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsTvRequests} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPut(apiKey?: object, model?: OmbiStoreEntitiesRequestsTvRequests, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiStoreEntitiesRequestsTvRequests" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the quality profile for this tv show
         * @param {number} requestId 
         * @param {number} qualityId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvQualityByRequestIdByQualityIdPut(requestId: number, qualityId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvQualityByRequestIdByQualityIdPut.');
            }
            // verify required parameter 'qualityId' is not null or undefined
            if (qualityId === null || qualityId === undefined) {
                throw new RequiredError('qualityId','Required parameter qualityId was null or undefined when calling requestTvQualityByRequestIdByQualityIdPut.');
            }
            const localVarPath = `/api/v1/Request/tv/quality/{requestId}/{qualityId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)))
                .replace(`{${"qualityId"}}`, encodeURIComponent(String(qualityId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRemainingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/remaining`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the root path for this tv show
         * @param {number} requestId 
         * @param {number} rootFolderId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRootByRequestIdByRootFolderIdPut(requestId: number, rootFolderId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvRootByRequestIdByRootFolderIdPut.');
            }
            // verify required parameter 'rootFolderId' is not null or undefined
            if (rootFolderId === null || rootFolderId === undefined) {
                throw new RequiredError('rootFolderId','Required parameter rootFolderId was null or undefined when calling requestTvRootByRequestIdByRootFolderIdPut.');
            }
            const localVarPath = `/api/v1/Request/tv/root/{requestId}/{rootFolderId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)))
                .replace(`{${"rootFolderId"}}`, encodeURIComponent(String(rootFolderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for a specific tv request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSearchBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling requestTvSearchBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Request/tv/search/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSubscribeByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvSubscribeByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Request/tv/subscribe/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the total amount of TV requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvTotalGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/total`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified tv child as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnavailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tv/unavailable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsTvUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestTvUnsubscribeByRequestIdPost.');
            }
            const localVarPath = `/api/v1/Request/tv/unsubscribe/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the tv requests lite.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'orderType' is not null or undefined
            if (orderType === null || orderType === undefined) {
                throw new RequiredError('orderType','Required parameter orderType was null or undefined when calling requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'statusFilterType' is not null or undefined
            if (statusFilterType === null || statusFilterType === undefined) {
                throw new RequiredError('statusFilterType','Required parameter statusFilterType was null or undefined when calling requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            // verify required parameter 'availabilityFilterType' is not null or undefined
            if (availabilityFilterType === null || availabilityFilterType === undefined) {
                throw new RequiredError('availabilityFilterType','Required parameter availabilityFilterType was null or undefined when calling requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet.');
            }
            const localVarPath = `/api/v1/Request/tvlite/{count}/{position}/{orderType}/{statusFilterType}/{availabilityFilterType}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"orderType"}}`, encodeURIComponent(String(orderType)))
                .replace(`{${"statusFilterType"}}`, encodeURIComponent(String(statusFilterType)))
                .replace(`{${"availabilityFilterType"}}`, encodeURIComponent(String(availabilityFilterType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (statusType !== undefined) {
                localVarQueryParameter['statusType'] = statusType;
            }

            if (availabilityType !== undefined) {
                localVarQueryParameter['availabilityType'] = availabilityType;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the tv requests without the whole object graph (Does not include seasons/episodes).
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/tvlite`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the passed in user has a request
         * @param {string} [userId] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestUserhasrequestGet(userId?: string, apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Request/userhasrequest`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the count of total requests
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCountGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsRequestsRequestCountModel> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestCountGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the all movie request.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAllDelete(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieAllDelete(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Approves the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieApprovePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified Movie as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieAvailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsMovieRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the specified movie request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByRequestIdDelete(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieByRequestIdDelete(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Denies the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyMovieModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyMovieModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieDenyPut(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets all movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsMovieRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Requests a movie.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieRequestViewModel} [movie] The movie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePost(apiKey?: object, movie?: OmbiCoreModelsRequestsMovieRequestViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMoviePost(apiKey, movie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsMovieRequests} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePut(apiKey?: object, model?: OmbiStoreEntitiesRequestsMovieRequests, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsMovieRequests> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMoviePut(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieRemainingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsRequestQuotaCountModel> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieRemainingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for a specific movie request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsMovieRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieSearchBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Subscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieSubscribeByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the total amount of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieTotalGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieTotalGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified Movie as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieUnavailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestMovieUnsubscribeByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvApprovePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvApprovePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified tv child as available
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvAvailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvAvailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsTvRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retuns all children requests for the request id
         * @param {number} requestId The Request Id
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdChildGet(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsChildRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvByRequestIdChildGet(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdDelete(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvByRequestIdDelete(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the full request object for the specified requestId
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdGet(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsTvRequests> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvByRequestIdGet(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The model.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildByRequestIdDelete(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvChildByRequestIdDelete(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsChildRequests} [child] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildPut(apiKey?: object, child?: OmbiStoreEntitiesRequestsChildRequests, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsChildRequests> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvChildPut(apiKey, child, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Denies the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsDenyTvModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvDenyPut(apiKey?: object, model?: OmbiModelsDenyTvModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvDenyPut(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsTvRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Requests a tv show/episode/season.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsTvRequestViewModel} [tv] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPost(apiKey?: object, tv?: OmbiCoreModelsRequestsTvRequestViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvPost(apiKey, tv, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the a specific tv request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsTvRequests} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPut(apiKey?: object, model?: OmbiStoreEntitiesRequestsTvRequests, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsTvRequests> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvPut(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the quality profile for this tv show
         * @param {number} requestId 
         * @param {number} qualityId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvQualityByRequestIdByQualityIdPut(requestId: number, qualityId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvQualityByRequestIdByQualityIdPut(requestId, qualityId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRemainingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsRequestQuotaCountModel> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvRemainingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the root path for this tv show
         * @param {number} requestId 
         * @param {number} rootFolderId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRootByRequestIdByRootFolderIdPut(requestId: number, rootFolderId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvRootByRequestIdByRootFolderIdPut(requestId, rootFolderId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for a specific tv request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsTvRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvSearchBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Subscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvSubscribeByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the total amount of TV requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvTotalGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvTotalGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified tv child as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnavailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvUnavailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvUnsubscribeByRequestIdPost(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the tv requests lite.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsTvRequestsOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the tv requests without the whole object graph (Does not include seasons/episodes).
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsTvRequests>> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestTvliteGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Checks if the passed in user has a request
         * @param {string} [userId] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestUserhasrequestGet(userId?: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = RequestApiAxiosParamCreator(configuration).requestUserhasrequestGet(userId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Gets the count of total requests
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCountGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestCountGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes the all movie request.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAllDelete(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieAllDelete(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Approves the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestMovieApprovePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified Movie as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestMovieAvailablePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets movie requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes the specified movie request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieByRequestIdDelete(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Denies the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyMovieModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyMovieModel, options?: any) {
            return RequestApiFp(configuration).requestMovieDenyPut(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets all movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Requests a movie.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieRequestViewModel} [movie] The movie.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePost(apiKey?: object, movie?: OmbiCoreModelsRequestsMovieRequestViewModel, options?: any) {
            return RequestApiFp(configuration).requestMoviePost(apiKey, movie, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the specified movie request.
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsMovieRequests} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMoviePut(apiKey?: object, model?: OmbiStoreEntitiesRequestsMovieRequests, options?: any) {
            return RequestApiFp(configuration).requestMoviePut(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets model containing remaining number of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieRemainingGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieRemainingGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for a specific movie request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieSearchBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Subscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieSubscribeByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the total amount of movie requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieTotalGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieTotalGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified Movie as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestMovieUnavailablePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a movie request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMovieUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestMovieUnsubscribeByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvApprovePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestTvApprovePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified tv child as available
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvAvailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestTvAvailablePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Retuns all children requests for the request id
         * @param {number} requestId The Request Id
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdChildGet(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvByRequestIdChildGet(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvByRequestIdDelete(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the full request object for the specified requestId
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvByRequestIdGet(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes the a specific tv request
         * @param {number} requestId The model.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvChildByRequestIdDelete(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsChildRequests} [child] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvChildPut(apiKey?: object, child?: OmbiStoreEntitiesRequestsChildRequests, options?: any) {
            return RequestApiFp(configuration).requestTvChildPut(apiKey, child, options)(axios, basePath);
        },
        /**
         * 
         * @summary Denies the a specific child request
         * @param {object} [apiKey] 
         * @param {OmbiModelsDenyTvModel} [model] This is the child request\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvDenyPut(apiKey?: object, model?: OmbiModelsDenyTvModel, options?: any) {
            return RequestApiFp(configuration).requestTvDenyPut(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Requests a tv show/episode/season.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsTvRequestViewModel} [tv] The tv.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPost(apiKey?: object, tv?: OmbiCoreModelsRequestsTvRequestViewModel, options?: any) {
            return RequestApiFp(configuration).requestTvPost(apiKey, tv, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the a specific tv request
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsTvRequests} [model] The model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvPut(apiKey?: object, model?: OmbiStoreEntitiesRequestsTvRequests, options?: any) {
            return RequestApiFp(configuration).requestTvPut(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the quality profile for this tv show
         * @param {number} requestId 
         * @param {number} qualityId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvQualityByRequestIdByQualityIdPut(requestId: number, qualityId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvQualityByRequestIdByQualityIdPut(requestId, qualityId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets model containing remaining number of tv requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRemainingGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvRemainingGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the root path for this tv show
         * @param {number} requestId 
         * @param {number} rootFolderId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvRootByRequestIdByRootFolderIdPut(requestId: number, rootFolderId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvRootByRequestIdByRootFolderIdPut(requestId, rootFolderId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for a specific tv request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvSearchBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Subscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvSubscribeByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the total amount of TV requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvTotalGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvTotalGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified tv child as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnavailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
            return RequestApiFp(configuration).requestTvUnavailablePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary UnSubscribes for notifications to a TV request
         * @param {number} requestId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvUnsubscribeByRequestIdPost(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the tv requests lite.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType 
         * @param {string} statusFilterType 
         * @param {string} availabilityFilterType 
         * @param {number} [statusType] 
         * @param {number} [availabilityType] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the tv requests without the whole object graph (Does not include seasons/episodes).
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTvliteGet(apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestTvliteGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Checks if the passed in user has a request
         * @param {string} [userId] 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestUserhasrequestGet(userId?: string, apiKey?: object, options?: any) {
            return RequestApiFp(configuration).requestUserhasrequestGet(userId, apiKey, options)(axios, basePath);
        },
    };
};

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * 
     * @summary Gets the count of total requests
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestCountGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestCountGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes the all movie request.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieAllDelete(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieAllDelete(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Approves the specified movie request.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestMovieApprovePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified Movie as available
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestMovieAvailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets movie requests.
     * @param {number} count The count of items you want to return.
     * @param {number} position The position.
     * @param {number} orderType The way we want to order.
     * @param {number} statusType 
     * @param {number} availabilityType 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes the specified movie request.
     * @param {number} requestId The request identifier.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieByRequestIdDelete(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Denies the specified movie request.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsDenyMovieModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyMovieModel, options?: any) {
        return RequestApiFp(this.configuration).requestMovieDenyPut(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets all movie requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Requests a movie.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsMovieRequestViewModel} [movie] The movie.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMoviePost(apiKey?: object, movie?: OmbiCoreModelsRequestsMovieRequestViewModel, options?: any) {
        return RequestApiFp(this.configuration).requestMoviePost(apiKey, movie, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the specified movie request.
     * @param {object} [apiKey] 
     * @param {OmbiStoreEntitiesRequestsMovieRequests} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMoviePut(apiKey?: object, model?: OmbiStoreEntitiesRequestsMovieRequests, options?: any) {
        return RequestApiFp(this.configuration).requestMoviePut(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets model containing remaining number of movie requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieRemainingGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieRemainingGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for a specific movie request
     * @param {string} searchTerm The search term.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieSearchBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Subscribes for notifications to a movie request
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieSubscribeByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the total amount of movie requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieTotalGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieTotalGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified Movie as unavailable
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsMovieUpdateModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsMovieUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestMovieUnavailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary UnSubscribes for notifications to a movie request
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestMovieUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestMovieUnsubscribeByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the a specific child request
     * @param {object} [apiKey] 
     * @param {OmbiModelsTvUpdateModel} [model] This is the child request\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvApprovePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestTvApprovePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified tv child as available
     * @param {object} [apiKey] 
     * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvAvailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestTvAvailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the tv requests.
     * @param {number} count The count of items you want to return.
     * @param {number} position The position.
     * @param {number} orderType 
     * @param {string} statusFilterType 
     * @param {string} availabilityFilterType 
     * @param {number} [statusType] 
     * @param {number} [availabilityType] 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Retuns all children requests for the request id
     * @param {number} requestId The Request Id
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvByRequestIdChildGet(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvByRequestIdChildGet(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes the a specific tv request
     * @param {number} requestId The request identifier.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvByRequestIdDelete(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the full request object for the specified requestId
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvByRequestIdGet(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvByRequestIdGet(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes the a specific tv request
     * @param {number} requestId The model.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvChildByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvChildByRequestIdDelete(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the a specific child request
     * @param {object} [apiKey] 
     * @param {OmbiStoreEntitiesRequestsChildRequests} [child] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvChildPut(apiKey?: object, child?: OmbiStoreEntitiesRequestsChildRequests, options?: any) {
        return RequestApiFp(this.configuration).requestTvChildPut(apiKey, child, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Denies the a specific child request
     * @param {object} [apiKey] 
     * @param {OmbiModelsDenyTvModel} [model] This is the child request\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvDenyPut(apiKey?: object, model?: OmbiModelsDenyTvModel, options?: any) {
        return RequestApiFp(this.configuration).requestTvDenyPut(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the tv requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Requests a tv show/episode/season.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsTvRequestViewModel} [tv] The tv.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvPost(apiKey?: object, tv?: OmbiCoreModelsRequestsTvRequestViewModel, options?: any) {
        return RequestApiFp(this.configuration).requestTvPost(apiKey, tv, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the a specific tv request
     * @param {object} [apiKey] 
     * @param {OmbiStoreEntitiesRequestsTvRequests} [model] The model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvPut(apiKey?: object, model?: OmbiStoreEntitiesRequestsTvRequests, options?: any) {
        return RequestApiFp(this.configuration).requestTvPut(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the quality profile for this tv show
     * @param {number} requestId 
     * @param {number} qualityId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvQualityByRequestIdByQualityIdPut(requestId: number, qualityId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvQualityByRequestIdByQualityIdPut(requestId, qualityId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets model containing remaining number of tv requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvRemainingGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvRemainingGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the root path for this tv show
     * @param {number} requestId 
     * @param {number} rootFolderId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvRootByRequestIdByRootFolderIdPut(requestId: number, rootFolderId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvRootByRequestIdByRootFolderIdPut(requestId, rootFolderId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for a specific tv request
     * @param {string} searchTerm The search term.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvSearchBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Subscribes for notifications to a TV request
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvSubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvSubscribeByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the total amount of TV requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvTotalGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvTotalGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified tv child as unavailable
     * @param {object} [apiKey] 
     * @param {OmbiModelsTvUpdateModel} [model] The Movie\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvUnavailablePost(apiKey?: object, model?: OmbiModelsTvUpdateModel, options?: any) {
        return RequestApiFp(this.configuration).requestTvUnavailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary UnSubscribes for notifications to a TV request
     * @param {number} requestId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvUnsubscribeByRequestIdPost(requestId: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvUnsubscribeByRequestIdPost(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the tv requests lite.
     * @param {number} count The count of items you want to return.
     * @param {number} position The position.
     * @param {number} orderType 
     * @param {string} statusFilterType 
     * @param {string} availabilityFilterType 
     * @param {number} [statusType] 
     * @param {number} [availabilityType] 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count: number, position: number, orderType: number, statusFilterType: string, availabilityFilterType: string, statusType?: number, availabilityType?: number, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvliteByCountByPositionByOrderTypeByStatusFilterTypeByAvailabilityFilterTypeGet(count, position, orderType, statusFilterType, availabilityFilterType, statusType, availabilityType, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the tv requests without the whole object graph (Does not include seasons/episodes).
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestTvliteGet(apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestTvliteGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Checks if the passed in user has a request
     * @param {string} [userId] 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public requestUserhasrequestGet(userId?: string, apiKey?: object, options?: any) {
        return RequestApiFp(this.configuration).requestUserhasrequestGet(userId, apiKey, options)(this.axios, this.basePath);
    }

}
