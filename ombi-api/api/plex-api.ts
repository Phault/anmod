// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiApiPlexModelsPlexAuthentication } from '../model';
import { OmbiApiPlexModelsUserRequest } from '../model';
import { OmbiCoreSettingsModelsExternalPlexServers } from '../model';
import { OmbiModelsExternalPlexLibrariesLiteResponse } from '../model';
import { OmbiModelsExternalPlexLibrariesResponse } from '../model';
import { OmbiModelsExternalPlexServersViewModel } from '../model';
import { OmbiModelsExternalPlexUserViewModel } from '../model';
import { OmbiModelsExternalUsersViewModel } from '../model';
import { OmbiModelsPlexOAuthViewModel } from '../model';
/**
 * PlexApi - axios parameter creator
 * @export
 */
export const PlexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the plex friends.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexFriendsGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/friends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} machineId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesByMachineIdGet(machineId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'machineId' is not null or undefined
            if (machineId === null || machineId === undefined) {
                throw new RequiredError('machineId','Required parameter machineId was null or undefined when calling plexLibrariesByMachineIdGet.');
            }
            const localVarPath = `/api/v1/Plex/Libraries/{machineId}`
                .replace(`{${"machineId"}}`, encodeURIComponent(String(machineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the plex libraries.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/Libraries`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsExternalPlexServers" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsPlexOAuthViewModel} [wizard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexOauthPost(apiKey?: object, wizard?: OmbiModelsPlexOAuthViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/oauth`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsPlexOAuthViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wizard !== undefined ? wizard : {}) : (wizard || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signs into the Plex API.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [request] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexPost(apiKey?: object, request?: OmbiApiPlexModelsUserRequest, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiApiPlexModelsUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/servers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [u] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersPost(apiKey?: object, u?: OmbiApiPlexModelsUserRequest, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/servers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiApiPlexModelsUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(u !== undefined ? u : {}) : (u || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsExternalPlexUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexUserPost(apiKey?: object, user?: OmbiModelsExternalPlexUserViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Plex/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsExternalPlexUserViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlexApi - functional programming interface
 * @export
 */
export const PlexApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the plex friends.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexFriendsGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiModelsExternalUsersViewModel>> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexFriendsGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} machineId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesByMachineIdGet(machineId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsExternalPlexLibrariesLiteResponse> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexLibrariesByMachineIdGet(machineId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the plex libraries.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsExternalPlexLibrariesResponse> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexLibrariesPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsPlexOAuthViewModel} [wizard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexOauthPost(apiKey?: object, wizard?: OmbiModelsPlexOAuthViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexOauthPost(apiKey, wizard, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Signs into the Plex API.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [request] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexPost(apiKey?: object, request?: OmbiApiPlexModelsUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiApiPlexModelsPlexAuthentication> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexPost(apiKey, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexServersGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [u] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersPost(apiKey?: object, u?: OmbiApiPlexModelsUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsExternalPlexServersViewModel> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexServersPost(apiKey, u, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsExternalPlexUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexUserPost(apiKey?: object, user?: OmbiModelsExternalPlexUserViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = PlexApiAxiosParamCreator(configuration).plexUserPost(apiKey, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PlexApi - factory interface
 * @export
 */
export const PlexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Gets the plex friends.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexFriendsGet(apiKey?: object, options?: any) {
            return PlexApiFp(configuration).plexFriendsGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} machineId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesByMachineIdGet(machineId: string, apiKey?: object, options?: any) {
            return PlexApiFp(configuration).plexLibrariesByMachineIdGet(machineId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the plex libraries.
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexLibrariesPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any) {
            return PlexApiFp(configuration).plexLibrariesPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsPlexOAuthViewModel} [wizard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexOauthPost(apiKey?: object, wizard?: OmbiModelsPlexOAuthViewModel, options?: any) {
            return PlexApiFp(configuration).plexOauthPost(apiKey, wizard, options)(axios, basePath);
        },
        /**
         * 
         * @summary Signs into the Plex API.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [request] The request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexPost(apiKey?: object, request?: OmbiApiPlexModelsUserRequest, options?: any) {
            return PlexApiFp(configuration).plexPost(apiKey, request, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersGet(apiKey?: object, options?: any) {
            return PlexApiFp(configuration).plexServersGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the plex servers.
         * @param {object} [apiKey] 
         * @param {OmbiApiPlexModelsUserRequest} [u] The u.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexServersPost(apiKey?: object, u?: OmbiApiPlexModelsUserRequest, options?: any) {
            return PlexApiFp(configuration).plexServersPost(apiKey, u, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsExternalPlexUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plexUserPost(apiKey?: object, user?: OmbiModelsExternalPlexUserViewModel, options?: any) {
            return PlexApiFp(configuration).plexUserPost(apiKey, user, options)(axios, basePath);
        },
    };
};

/**
 * PlexApi - object-oriented interface
 * @export
 * @class PlexApi
 * @extends {BaseAPI}
 */
export class PlexApi extends BaseAPI {
    /**
     * 
     * @summary Gets the plex friends.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexFriendsGet(apiKey?: object, options?: any) {
        return PlexApiFp(this.configuration).plexFriendsGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} machineId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexLibrariesByMachineIdGet(machineId: string, apiKey?: object, options?: any) {
        return PlexApiFp(this.configuration).plexLibrariesByMachineIdGet(machineId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the plex libraries.
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexLibrariesPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any) {
        return PlexApiFp(this.configuration).plexLibrariesPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiModelsPlexOAuthViewModel} [wizard] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexOauthPost(apiKey?: object, wizard?: OmbiModelsPlexOAuthViewModel, options?: any) {
        return PlexApiFp(this.configuration).plexOauthPost(apiKey, wizard, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Signs into the Plex API.
     * @param {object} [apiKey] 
     * @param {OmbiApiPlexModelsUserRequest} [request] The request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexPost(apiKey?: object, request?: OmbiApiPlexModelsUserRequest, options?: any) {
        return PlexApiFp(this.configuration).plexPost(apiKey, request, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the plex servers.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexServersGet(apiKey?: object, options?: any) {
        return PlexApiFp(this.configuration).plexServersGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the plex servers.
     * @param {object} [apiKey] 
     * @param {OmbiApiPlexModelsUserRequest} [u] The u.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexServersPost(apiKey?: object, u?: OmbiApiPlexModelsUserRequest, options?: any) {
        return PlexApiFp(this.configuration).plexServersPost(apiKey, u, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiModelsExternalPlexUserViewModel} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlexApi
     */
    public plexUserPost(apiKey?: object, user?: OmbiModelsExternalPlexUserViewModel, options?: any) {
        return PlexApiFp(this.configuration).plexUserPost(apiKey, user, options)(this.axios, this.basePath);
    }

}
