// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreEngineRequestEngineResult } from '../model';
import { OmbiCoreModelsRequestQuotaCountModel } from '../model';
import { OmbiCoreModelsRequestsAlbumUpdateModel } from '../model';
import { OmbiCoreModelsRequestsDenyAlbumModel } from '../model';
import { OmbiCoreModelsRequestsMusicAlbumRequestViewModel } from '../model';
import { OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull } from '../model';
import { OmbiStoreEntitiesRequestsAlbumRequest } from '../model';
/**
 * MusicRequestApi - axios parameter creator
 * @export
 */
export const MusicRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approves the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The albums\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/approve`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsAlbumUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified album as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/available`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsAlbumUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'position' is not null or undefined
            if (position === null || position === undefined) {
                throw new RequiredError('position','Required parameter position was null or undefined when calling requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'orderType' is not null or undefined
            if (orderType === null || orderType === undefined) {
                throw new RequiredError('orderType','Required parameter orderType was null or undefined when calling requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'statusType' is not null or undefined
            if (statusType === null || statusType === undefined) {
                throw new RequiredError('statusType','Required parameter statusType was null or undefined when calling requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            // verify required parameter 'availabilityType' is not null or undefined
            if (availabilityType === null || availabilityType === undefined) {
                throw new RequiredError('availabilityType','Required parameter availabilityType was null or undefined when calling requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet.');
            }
            const localVarPath = `/api/v1/request/music/{count}/{position}/{orderType}/{statusType}/{availabilityType}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)))
                .replace(`{${"position"}}`, encodeURIComponent(String(position)))
                .replace(`{${"orderType"}}`, encodeURIComponent(String(orderType)))
                .replace(`{${"statusType"}}`, encodeURIComponent(String(statusType)))
                .replace(`{${"availabilityType"}}`, encodeURIComponent(String(availabilityType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByRequestIdDelete(requestId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling requestMusicByRequestIdDelete.');
            }
            const localVarPath = `/api/v1/request/music/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Denies the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyAlbumModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/deny`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsDenyAlbumModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Requests a album.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [album] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicPost(apiKey?: object, album?: OmbiCoreModelsRequestsMusicAlbumRequestViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsMusicAlbumRequestViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(album !== undefined ? album : {}) : (album || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of music requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicRemainingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/remaining`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicSearchBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling requestMusicSearchBySearchTermGet.');
            }
            const localVarPath = `/api/v1/request/music/search/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the total amount of album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicTotalGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/total`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set\'s the specified album as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/request/music/unavailable`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsRequestsAlbumUpdateModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MusicRequestApi - functional programming interface
 * @export
 */
export const MusicRequestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approves the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The albums\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicApprovePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified album as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicAvailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIRequestsViewModel1OmbiStoreEntitiesRequestsAlbumRequestOmbiStoreVersion3000CultureneutralPublicKeyTokennull> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByRequestIdDelete(requestId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicByRequestIdDelete(requestId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Denies the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyAlbumModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicDenyPut(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets all album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsAlbumRequest>> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Requests a album.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [album] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicPost(apiKey?: object, album?: OmbiCoreModelsRequestsMusicAlbumRequestViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicPost(apiKey, album, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets model containing remaining number of music requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicRemainingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsRequestQuotaCountModel> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicRemainingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsAlbumRequest>> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicSearchBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the total amount of album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicTotalGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicTotalGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Set\'s the specified album as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreEngineRequestEngineResult> {
            const localVarAxiosArgs = MusicRequestApiAxiosParamCreator(configuration).requestMusicUnavailablePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MusicRequestApi - factory interface
 * @export
 */
export const MusicRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Approves the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The albums\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicApprovePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified album as available
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicAvailablePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets album requests.
         * @param {number} count The count of items you want to return.
         * @param {number} position The position.
         * @param {number} orderType The way we want to order.
         * @param {number} statusType 
         * @param {number} availabilityType 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes the specified album request.
         * @param {number} requestId The request identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicByRequestIdDelete(requestId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Denies the specified album request.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsDenyAlbumModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyAlbumModel, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicDenyPut(apiKey, model, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets all album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicGet(apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Requests a album.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [album] The album.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicPost(apiKey?: object, album?: OmbiCoreModelsRequestsMusicAlbumRequestViewModel, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicPost(apiKey, album, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets model containing remaining number of music requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicRemainingGet(apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicRemainingGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for a specific album request
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicSearchBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the total amount of album requests.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicTotalGet(apiKey?: object, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicTotalGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Set\'s the specified album as unavailable
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestMusicUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
            return MusicRequestApiFp(configuration).requestMusicUnavailablePost(apiKey, model, options)(axios, basePath);
        },
    };
};

/**
 * MusicRequestApi - object-oriented interface
 * @export
 * @class MusicRequestApi
 * @extends {BaseAPI}
 */
export class MusicRequestApi extends BaseAPI {
    /**
     * 
     * @summary Approves the specified album request.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The albums\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicApprovePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicApprovePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified album as available
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicAvailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicAvailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets album requests.
     * @param {number} count The count of items you want to return.
     * @param {number} position The position.
     * @param {number} orderType The way we want to order.
     * @param {number} statusType 
     * @param {number} availabilityType 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count: number, position: number, orderType: number, statusType: number, availabilityType: number, apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicByCountByPositionByOrderTypeByStatusTypeByAvailabilityTypeGet(count, position, orderType, statusType, availabilityType, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes the specified album request.
     * @param {number} requestId The request identifier.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicByRequestIdDelete(requestId: number, apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicByRequestIdDelete(requestId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Denies the specified album request.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsDenyAlbumModel} [model] The album\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicDenyPut(apiKey?: object, model?: OmbiCoreModelsRequestsDenyAlbumModel, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicDenyPut(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets all album requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicGet(apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Requests a album.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsMusicAlbumRequestViewModel} [album] The album.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicPost(apiKey?: object, album?: OmbiCoreModelsRequestsMusicAlbumRequestViewModel, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicPost(apiKey, album, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets model containing remaining number of music requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicRemainingGet(apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicRemainingGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for a specific album request
     * @param {string} searchTerm The search term.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicSearchBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicSearchBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the total amount of album requests.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicTotalGet(apiKey?: object, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicTotalGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Set\'s the specified album as unavailable
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsRequestsAlbumUpdateModel} [model] The album\&#39;s ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicRequestApi
     */
    public requestMusicUnavailablePost(apiKey?: object, model?: OmbiCoreModelsRequestsAlbumUpdateModel, options?: any) {
        return MusicRequestApiFp(this.configuration).requestMusicUnavailablePost(apiKey, model, options)(this.axios, this.basePath);
    }

}
