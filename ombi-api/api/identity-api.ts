// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsUIClaimCheckboxes } from '../model';
import { OmbiCoreModelsUIUserViewModel } from '../model';
import { OmbiModelsIdentityAddNotificationPreference } from '../model';
import { OmbiModelsIdentityIdentityResult } from '../model';
import { OmbiModelsIdentityUpdateLocalUserModel } from '../model';
import { OmbiStoreEntitiesUserNotificationPreferences } from '../model';
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityByUserIdDelete(userId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling identityByUserIdDelete.');
            }
            const localVarPath = `/api/v1/Identity/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all available claims in the system.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityClaimsGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/claims`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the current logged in user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This is for the local user to change their details.
         * @param {object} [apiKey] 
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [ui] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLocalPut(apiKey?: object, ui?: OmbiModelsIdentityUpdateLocalUserModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/local`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsIdentityUpdateLocalUserModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ui !== undefined ? ui : {}) : (ui || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {Array<OmbiModelsIdentityAddNotificationPreference>} [preferences] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationPreferencesPost(apiKey?: object, preferences?: Array<OmbiModelsIdentityAddNotificationPreference>, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/NotificationPreferences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Array&lt;OmbiModelsIdentityAddNotificationPreference&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(preferences !== undefined ? preferences : {}) : (preferences || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesByUserIdGet(userId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling identityNotificationpreferencesByUserIdGet.');
            }
            const localVarPath = `/api/v1/Identity/notificationpreferences/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/notificationpreferences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIUserViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [ui] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPut(apiKey?: object, ui?: OmbiCoreModelsUIUserViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIUserViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ui !== undefined ? ui : {}) : (ui || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the user by the user id.
         * @param {string} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUserByIdGet(id: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling identityUserByIdGet.');
            }
            const localVarPath = `/api/v1/Identity/User/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all users.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUsersGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/Users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityWelcomeEmailPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Identity/welcomeEmail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUIUserViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityByUserIdDelete(userId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsIdentityIdentityResult> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityByUserIdDelete(userId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets all available claims in the system.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityClaimsGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsUIClaimCheckboxes>> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityClaimsGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the current logged in user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIUserViewModel> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary This is for the local user to change their details.
         * @param {object} [apiKey] 
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [ui] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLocalPut(apiKey?: object, ui?: OmbiModelsIdentityUpdateLocalUserModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsIdentityIdentityResult> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityLocalPut(apiKey, ui, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {Array<OmbiModelsIdentityAddNotificationPreference>} [preferences] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationPreferencesPost(apiKey?: object, preferences?: Array<OmbiModelsIdentityAddNotificationPreference>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityNotificationPreferencesPost(apiKey, preferences, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesByUserIdGet(userId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityNotificationpreferencesByUserIdGet(userId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesUserNotificationPreferences>> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityNotificationpreferencesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsIdentityIdentityResult> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityPost(apiKey, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [ui] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPut(apiKey?: object, ui?: OmbiCoreModelsUIUserViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsIdentityIdentityResult> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityPut(apiKey, ui, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the user by the user id.
         * @param {string} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUserByIdGet(id: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsUIUserViewModel> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityUserByIdGet(id, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets all users.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUsersGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsUIUserViewModel>> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityUsersGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityWelcomeEmailPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityWelcomeEmailPost(apiKey, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Deletes the user.
         * @param {string} userId The user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityByUserIdDelete(userId: string, apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityByUserIdDelete(userId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets all available claims in the system.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityClaimsGet(apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityClaimsGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the current logged in user.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary This is for the local user to change their details.
         * @param {object} [apiKey] 
         * @param {OmbiModelsIdentityUpdateLocalUserModel} [ui] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityLocalPut(apiKey?: object, ui?: OmbiModelsIdentityUpdateLocalUserModel, options?: any) {
            return IdentityApiFp(configuration).identityLocalPut(apiKey, ui, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {Array<OmbiModelsIdentityAddNotificationPreference>} [preferences] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationPreferencesPost(apiKey?: object, preferences?: Array<OmbiModelsIdentityAddNotificationPreference>, options?: any) {
            return IdentityApiFp(configuration).identityNotificationPreferencesPost(apiKey, preferences, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesByUserIdGet(userId: string, apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityNotificationpreferencesByUserIdGet(userId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityNotificationpreferencesGet(apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityNotificationpreferencesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any) {
            return IdentityApiFp(configuration).identityPost(apiKey, user, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the user.
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [ui] The user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityPut(apiKey?: object, ui?: OmbiCoreModelsUIUserViewModel, options?: any) {
            return IdentityApiFp(configuration).identityPut(apiKey, ui, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the user by the user id.
         * @param {string} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUserByIdGet(id: string, apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityUserByIdGet(id, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets all users.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityUsersGet(apiKey?: object, options?: any) {
            return IdentityApiFp(configuration).identityUsersGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUIUserViewModel} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityWelcomeEmailPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any) {
            return IdentityApiFp(configuration).identityWelcomeEmailPost(apiKey, user, options)(axios, basePath);
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @summary Deletes the user.
     * @param {string} userId The user.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityByUserIdDelete(userId: string, apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityByUserIdDelete(userId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets all available claims in the system.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityClaimsGet(apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityClaimsGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the current logged in user.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityGet(apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary This is for the local user to change their details.
     * @param {object} [apiKey] 
     * @param {OmbiModelsIdentityUpdateLocalUserModel} [ui] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityLocalPut(apiKey?: object, ui?: OmbiModelsIdentityUpdateLocalUserModel, options?: any) {
        return IdentityApiFp(this.configuration).identityLocalPut(apiKey, ui, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {Array<OmbiModelsIdentityAddNotificationPreference>} [preferences] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityNotificationPreferencesPost(apiKey?: object, preferences?: Array<OmbiModelsIdentityAddNotificationPreference>, options?: any) {
        return IdentityApiFp(this.configuration).identityNotificationPreferencesPost(apiKey, preferences, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} userId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityNotificationpreferencesByUserIdGet(userId: string, apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityNotificationpreferencesByUserIdGet(userId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityNotificationpreferencesGet(apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityNotificationpreferencesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates the user.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIUserViewModel} [user] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any) {
        return IdentityApiFp(this.configuration).identityPost(apiKey, user, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the user.
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIUserViewModel} [ui] The user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityPut(apiKey?: object, ui?: OmbiCoreModelsUIUserViewModel, options?: any) {
        return IdentityApiFp(this.configuration).identityPut(apiKey, ui, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the user by the user id.
     * @param {string} id 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityUserByIdGet(id: string, apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityUserByIdGet(id, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets all users.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityUsersGet(apiKey?: object, options?: any) {
        return IdentityApiFp(this.configuration).identityUsersGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUIUserViewModel} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityWelcomeEmailPost(apiKey?: object, user?: OmbiCoreModelsUIUserViewModel, options?: any) {
        return IdentityApiFp(this.configuration).identityWelcomeEmailPost(apiKey, user, options)(this.axios, this.basePath);
    }

}
