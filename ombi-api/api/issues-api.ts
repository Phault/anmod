// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiModelsIssueCommentChatViewModel } from '../model';
import { OmbiModelsIssueCountModel } from '../model';
import { OmbiModelsIssueStateViewModel } from '../model';
import { OmbiModelsNewIssueCommentViewModel } from '../model';
import { OmbiStoreEntitiesRequestsIssueCategory } from '../model';
import { OmbiStoreEntitiesRequestsIssueComments } from '../model';
import { OmbiStoreEntitiesRequestsIssues } from '../model';
/**
 * IssuesApi - axios parameter creator
 * @export
 */
export const IssuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s all the issue comments by id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdCommentsGet(id: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling issuesByIdCommentsGet.');
            }
            const localVarPath = `/api/v1/Issues/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the issue by Id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdGet(id: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling issuesByIdGet.');
            }
            const localVarPath = `/api/v1/Issues/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {number} take 
         * @param {number} skip 
         * @param {'Pending' | 'InProgress' | 'Resolved' | 'Deleted'} status 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByTakeBySkipByStatusGet(take: number, skip: number, status: 'Pending' | 'InProgress' | 'Resolved' | 'Deleted', apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling issuesByTakeBySkipByStatusGet.');
            }
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling issuesByTakeBySkipByStatusGet.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling issuesByTakeBySkipByStatusGet.');
            }
            const localVarPath = `/api/v1/Issues/{take}/{skip}/{status}`
                .replace(`{${"take"}}`, encodeURIComponent(String(take)))
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a Category
         * @param {number} catId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesByCatIdDelete(catId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'catId' is not null or undefined
            if (catId === null || catId === undefined) {
                throw new RequiredError('catId','Required parameter catId was null or undefined when calling issuesCategoriesByCatIdDelete.');
            }
            const localVarPath = `/api/v1/Issues/categories/{catId}`
                .replace(`{${"catId"}}`, encodeURIComponent(String(catId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s all categories
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues/categories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new category
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [cat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesPost(apiKey?: object, cat?: OmbiStoreEntitiesRequestsIssueCategory, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues/categories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiStoreEntitiesRequestsIssueCategory" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(cat !== undefined ? cat : {}) : (cat || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a comment on a issue
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsByIdDelete(id: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling issuesCommentsByIdDelete.');
            }
            const localVarPath = `/api/v1/Issues/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a comment on an issue
         * @param {object} [apiKey] 
         * @param {OmbiModelsNewIssueCommentViewModel} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsPost(apiKey?: object, comment?: OmbiModelsNewIssueCommentViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues/comments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsNewIssueCommentViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(comment !== undefined ? comment : {}) : (comment || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all the issues count
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCountGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues/count`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Movie Issue
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssues} [i] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPost(apiKey?: object, i?: OmbiStoreEntitiesRequestsIssues, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiStoreEntitiesRequestsIssues" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(i !== undefined ? i : {}) : (i || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsIssueStateViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesStatusPost(apiKey?: object, model?: OmbiModelsIssueStateViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Issues/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsIssueStateViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssuesApi - functional programming interface
 * @export
 */
export const IssuesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s all the issue comments by id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdCommentsGet(id: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiModelsIssueCommentChatViewModel>> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesByIdCommentsGet(id, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns the issue by Id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdGet(id: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsIssues> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesByIdGet(id, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {number} take 
         * @param {number} skip 
         * @param {'Pending' | 'InProgress' | 'Resolved' | 'Deleted'} status 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByTakeBySkipByStatusGet(take: number, skip: number, status: 'Pending' | 'InProgress' | 'Resolved' | 'Deleted', apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsIssues>> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesByTakeBySkipByStatusGet(take, skip, status, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a Category
         * @param {number} catId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesByCatIdDelete(catId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCategoriesByCatIdDelete(catId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s all categories
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsIssueCategory>> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCategoriesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new category
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [cat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesPost(apiKey?: object, cat?: OmbiStoreEntitiesRequestsIssueCategory, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCategoriesPost(apiKey, cat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a comment on a issue
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsByIdDelete(id: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCommentsByIdDelete(id, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Adds a comment on an issue
         * @param {object} [apiKey] 
         * @param {OmbiModelsNewIssueCommentViewModel} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsPost(apiKey?: object, comment?: OmbiModelsNewIssueCommentViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiStoreEntitiesRequestsIssueComments> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCommentsPost(apiKey, comment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all the issues count
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCountGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiModelsIssueCountModel> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesCountGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiStoreEntitiesRequestsIssues>> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Movie Issue
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssues} [i] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPost(apiKey?: object, i?: OmbiStoreEntitiesRequestsIssues, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesPost(apiKey, i, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsIssueStateViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesStatusPost(apiKey?: object, model?: OmbiModelsIssueStateViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = IssuesApiAxiosParamCreator(configuration).issuesStatusPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IssuesApi - factory interface
 * @export
 */
export const IssuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get\'s all the issue comments by id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdCommentsGet(id: number, apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesByIdCommentsGet(id, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns the issue by Id
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByIdGet(id: number, apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesByIdGet(id, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {number} take 
         * @param {number} skip 
         * @param {'Pending' | 'InProgress' | 'Resolved' | 'Deleted'} status 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesByTakeBySkipByStatusGet(take: number, skip: number, status: 'Pending' | 'InProgress' | 'Resolved' | 'Deleted', apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesByTakeBySkipByStatusGet(take, skip, status, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes a Category
         * @param {number} catId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesByCatIdDelete(catId: number, apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesCategoriesByCatIdDelete(catId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s all categories
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesGet(apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesCategoriesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a new category
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssueCategory} [cat] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCategoriesPost(apiKey?: object, cat?: OmbiStoreEntitiesRequestsIssueCategory, options?: any) {
            return IssuesApiFp(configuration).issuesCategoriesPost(apiKey, cat, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes a comment on a issue
         * @param {number} id 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsByIdDelete(id: number, apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesCommentsByIdDelete(id, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Adds a comment on an issue
         * @param {object} [apiKey] 
         * @param {OmbiModelsNewIssueCommentViewModel} [comment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCommentsPost(apiKey?: object, comment?: OmbiModelsNewIssueCommentViewModel, options?: any) {
            return IssuesApiFp(configuration).issuesCommentsPost(apiKey, comment, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns all the issues count
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesCountGet(apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesCountGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns all the issues
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet(apiKey?: object, options?: any) {
            return IssuesApiFp(configuration).issuesGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @summary Create Movie Issue
         * @param {object} [apiKey] 
         * @param {OmbiStoreEntitiesRequestsIssues} [i] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPost(apiKey?: object, i?: OmbiStoreEntitiesRequestsIssues, options?: any) {
            return IssuesApiFp(configuration).issuesPost(apiKey, i, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsIssueStateViewModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesStatusPost(apiKey?: object, model?: OmbiModelsIssueStateViewModel, options?: any) {
            return IssuesApiFp(configuration).issuesStatusPost(apiKey, model, options)(axios, basePath);
        },
    };
};

/**
 * IssuesApi - object-oriented interface
 * @export
 * @class IssuesApi
 * @extends {BaseAPI}
 */
export class IssuesApi extends BaseAPI {
    /**
     * 
     * @summary Get\'s all the issue comments by id
     * @param {number} id 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesByIdCommentsGet(id: number, apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesByIdCommentsGet(id, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns the issue by Id
     * @param {number} id 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesByIdGet(id: number, apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesByIdGet(id, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns all the issues
     * @param {number} take 
     * @param {number} skip 
     * @param {'Pending' | 'InProgress' | 'Resolved' | 'Deleted'} status 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesByTakeBySkipByStatusGet(take: number, skip: number, status: 'Pending' | 'InProgress' | 'Resolved' | 'Deleted', apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesByTakeBySkipByStatusGet(take, skip, status, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes a Category
     * @param {number} catId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCategoriesByCatIdDelete(catId: number, apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesCategoriesByCatIdDelete(catId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s all categories
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCategoriesGet(apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesCategoriesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a new category
     * @param {object} [apiKey] 
     * @param {OmbiStoreEntitiesRequestsIssueCategory} [cat] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCategoriesPost(apiKey?: object, cat?: OmbiStoreEntitiesRequestsIssueCategory, options?: any) {
        return IssuesApiFp(this.configuration).issuesCategoriesPost(apiKey, cat, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes a comment on a issue
     * @param {number} id 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCommentsByIdDelete(id: number, apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesCommentsByIdDelete(id, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Adds a comment on an issue
     * @param {object} [apiKey] 
     * @param {OmbiModelsNewIssueCommentViewModel} [comment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCommentsPost(apiKey?: object, comment?: OmbiModelsNewIssueCommentViewModel, options?: any) {
        return IssuesApiFp(this.configuration).issuesCommentsPost(apiKey, comment, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns all the issues count
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesCountGet(apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesCountGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns all the issues
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesGet(apiKey?: object, options?: any) {
        return IssuesApiFp(this.configuration).issuesGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create Movie Issue
     * @param {object} [apiKey] 
     * @param {OmbiStoreEntitiesRequestsIssues} [i] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesPost(apiKey?: object, i?: OmbiStoreEntitiesRequestsIssues, options?: any) {
        return IssuesApiFp(this.configuration).issuesPost(apiKey, i, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiModelsIssueStateViewModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuesApi
     */
    public issuesStatusPost(apiKey?: object, model?: OmbiModelsIssueStateViewModel, options?: any) {
        return IssuesApiFp(this.configuration).issuesStatusPost(apiKey, model, options)(this.axios, this.basePath);
    }

}
