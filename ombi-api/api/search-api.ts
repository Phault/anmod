// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsSearchSearchAlbumViewModel } from '../model';
import { OmbiCoreModelsSearchSearchArtistViewModel } from '../model';
import { OmbiCoreModelsSearchSearchMovieViewModel } from '../model';
import { OmbiCoreModelsSearchSearchTvShowViewModel } from '../model';
import { OmbiModelsSearchActorModel } from '../model';
import { OmbiModelsSearchMovieExtraInfoRefineModel } from '../model';
import { OmbiModelsSearchMovieRefineModel } from '../model';
import { OmbiModelsSimilarMoviesRefineModel } from '../model';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for movies by a certain actor.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchActorModel} [model] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieActorPost(apiKey?: object, model?: OmbiModelsSearchActorModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/actor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsSearchActorModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling searchMovieBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Search/movie/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieByTheMovieDbIdSimilarGet(theMovieDbId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'theMovieDbId' is not null or undefined
            if (theMovieDbId === null || theMovieDbId === undefined) {
                throw new RequiredError('theMovieDbId','Required parameter theMovieDbId was null or undefined when calling searchMovieByTheMovieDbIdSimilarGet.');
            }
            const localVarPath = `/api/v1/Search/movie/{theMovieDbId}/similar`
                .replace(`{${"theMovieDbId"}}`, encodeURIComponent(String(theMovieDbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoByTheMovieDbIdGet(theMovieDbId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'theMovieDbId' is not null or undefined
            if (theMovieDbId === null || theMovieDbId === undefined) {
                throw new RequiredError('theMovieDbId','Required parameter theMovieDbId was null or undefined when calling searchMovieInfoByTheMovieDbIdGet.');
            }
            const localVarPath = `/api/v1/Search/movie/info/{theMovieDbId}`
                .replace(`{${"theMovieDbId"}}`, encodeURIComponent(String(theMovieDbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [model] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoPost(apiKey?: object, model?: OmbiModelsSearchMovieExtraInfoRefineModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsSearchMovieExtraInfoRefineModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieNowplayingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/nowplaying`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePopularGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/popular`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieRefineModel} [model] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePost(apiKey?: object, model?: OmbiModelsSearchMovieRefineModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsSearchMovieRefineModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {object} [apiKey] 
         * @param {OmbiModelsSimilarMoviesRefineModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieSimilarPost(apiKey?: object, model?: OmbiModelsSimilarMoviesRefineModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/similar`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsSimilarMoviesRefineModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(model !== undefined ? model : {}) : (model || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieTopratedGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/toprated`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieUpcomingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/movie/upcoming`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicAlbumBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling searchMusicAlbumBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Search/music/album/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'foreignArtistId' is not null or undefined
            if (foreignArtistId === null || foreignArtistId === undefined) {
                throw new RequiredError('foreignArtistId','Required parameter foreignArtistId was null or undefined when calling searchMusicArtistAlbumByForeignArtistIdGet.');
            }
            const localVarPath = `/api/v1/Search/music/artist/album/{foreignArtistId}`
                .replace(`{${"foreignArtistId"}}`, encodeURIComponent(String(foreignArtistId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling searchMusicArtistBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Search/music/artist/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvAnticipatedGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/tv/anticipated`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvBySearchTermGet(searchTerm: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'searchTerm' is not null or undefined
            if (searchTerm === null || searchTerm === undefined) {
                throw new RequiredError('searchTerm','Required parameter searchTerm was null or undefined when calling searchTvBySearchTermGet.');
            }
            const localVarPath = `/api/v1/Search/tv/{searchTerm}`
                .replace(`{${"searchTerm"}}`, encodeURIComponent(String(searchTerm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {number} tvdbId The TVDB identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvInfoByTvdbIdGet(tvdbId: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'tvdbId' is not null or undefined
            if (tvdbId === null || tvdbId === undefined) {
                throw new RequiredError('tvdbId','Required parameter tvdbId was null or undefined when calling searchTvInfoByTvdbIdGet.');
            }
            const localVarPath = `/api/v1/Search/tv/info/{tvdbId}`
                .replace(`{${"tvdbId"}}`, encodeURIComponent(String(tvdbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvMostwatchedGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/tv/mostwatched`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvPopularGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/tv/popular`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvTrendingGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Search/tv/trending`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for movies by a certain actor.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchActorModel} [model] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieActorPost(apiKey?: object, model?: OmbiModelsSearchActorModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieActorPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieByTheMovieDbIdSimilarGet(theMovieDbId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieByTheMovieDbIdSimilarGet(theMovieDbId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoByTheMovieDbIdGet(theMovieDbId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsSearchSearchMovieViewModel> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieInfoByTheMovieDbIdGet(theMovieDbId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [model] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoPost(apiKey?: object, model?: OmbiModelsSearchMovieExtraInfoRefineModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieInfoPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieNowplayingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieNowplayingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePopularGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMoviePopularGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieRefineModel} [model] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePost(apiKey?: object, model?: OmbiModelsSearchMovieRefineModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMoviePost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {object} [apiKey] 
         * @param {OmbiModelsSimilarMoviesRefineModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieSimilarPost(apiKey?: object, model?: OmbiModelsSimilarMoviesRefineModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieSimilarPost(apiKey, model, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieTopratedGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieTopratedGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieUpcomingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchMovieViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMovieUpcomingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicAlbumBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMusicAlbumBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchAlbumViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchArtistViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchMusicArtistBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvAnticipatedGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvAnticipatedGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvBySearchTermGet(searchTerm: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvBySearchTermGet(searchTerm, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {number} tvdbId The TVDB identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvInfoByTvdbIdGet(tvdbId: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmbiCoreModelsSearchSearchTvShowViewModel> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvInfoByTvdbIdGet(tvdbId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvMostwatchedGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvMostwatchedGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvPopularGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvPopularGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvTrendingGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OmbiCoreModelsSearchSearchTvShowViewModel>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchTvTrendingGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Searches for movies by a certain actor.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchActorModel} [model] language code is optional, by default it will be en. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieActorPost(apiKey?: object, model?: OmbiModelsSearchActorModel, options?: any) {
            return SearchApiFp(configuration).searchMovieActorPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {number} theMovieDbId ID of the movie
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieByTheMovieDbIdSimilarGet(theMovieDbId: number, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieByTheMovieDbIdSimilarGet(theMovieDbId, apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {number} theMovieDbId The movie database identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoByTheMovieDbIdGet(theMovieDbId: number, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieInfoByTheMovieDbIdGet(theMovieDbId, apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Gets extra information on the movie e.g. IMDBId
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [model] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieInfoPost(apiKey?: object, model?: OmbiModelsSearchMovieExtraInfoRefineModel, options?: any) {
            return SearchApiFp(configuration).searchMovieInfoPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Retuns Now Playing Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieNowplayingGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieNowplayingGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Popular Movies
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePopularGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMoviePopularGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Searches for a movie.
         * @param {object} [apiKey] 
         * @param {OmbiModelsSearchMovieRefineModel} [model] The refinement model, language code and year are both optional. Language code uses ISO 639-1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMoviePost(apiKey?: object, model?: OmbiModelsSearchMovieRefineModel, options?: any) {
            return SearchApiFp(configuration).searchMoviePost(apiKey, model, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns similar movies to the movie id passed in
         * @param {object} [apiKey] 
         * @param {OmbiModelsSimilarMoviesRefineModel} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieSimilarPost(apiKey?: object, model?: OmbiModelsSimilarMoviesRefineModel, options?: any) {
            return SearchApiFp(configuration).searchMovieSimilarPost(apiKey, model, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns top rated movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieTopratedGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieTopratedGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use TheMovieDb as the Movie Provider
         * @summary Returns Upcoming movies.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMovieUpcomingGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMovieUpcomingGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the album information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicAlbumBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMusicAlbumBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns all albums for the artist using the ForeignArtistId
         * @param {string} foreignArtistId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId: string, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId, apiKey, options)(axios, basePath);
        },
        /**
         * We use Lidarr as the Provider
         * @summary Returns the artist information we searched for
         * @param {string} searchTerm 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMusicArtistBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchMusicArtistBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns most Anticiplateds tv shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvAnticipatedGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvAnticipatedGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use TvMaze as the Provider
         * @summary Searches for a Tv Show.
         * @param {string} searchTerm The search term.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvBySearchTermGet(searchTerm, apiKey, options)(axios, basePath);
        },
        /**
         * We use TvMaze as the Provider
         * @summary Gets extra show information.
         * @param {number} tvdbId The TVDB identifier.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvInfoByTvdbIdGet(tvdbId: number, apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvInfoByTvdbIdGet(tvdbId, apiKey, options)(axios, basePath);
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Most watched shows.
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvMostwatchedGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvMostwatchedGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns Popular Tv Shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvPopularGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvPopularGet(apiKey, options)(axios, basePath);
        },
        /**
         * We use Trakt.tv as the Provider
         * @summary Returns trending shows
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTvTrendingGet(apiKey?: object, options?: any) {
            return SearchApiFp(configuration).searchTvTrendingGet(apiKey, options)(axios, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Searches for movies by a certain actor.
     * @param {object} [apiKey] 
     * @param {OmbiModelsSearchActorModel} [model] language code is optional, by default it will be en. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieActorPost(apiKey?: object, model?: OmbiModelsSearchActorModel, options?: any) {
        return SearchApiFp(this.configuration).searchMovieActorPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {string} searchTerm The search term.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {number} theMovieDbId ID of the movie
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieByTheMovieDbIdSimilarGet(theMovieDbId: number, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieByTheMovieDbIdSimilarGet(theMovieDbId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {number} theMovieDbId The movie database identifier.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieInfoByTheMovieDbIdGet(theMovieDbId: number, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieInfoByTheMovieDbIdGet(theMovieDbId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Gets extra information on the movie e.g. IMDBId
     * @param {object} [apiKey] 
     * @param {OmbiModelsSearchMovieExtraInfoRefineModel} [model] TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieInfoPost(apiKey?: object, model?: OmbiModelsSearchMovieExtraInfoRefineModel, options?: any) {
        return SearchApiFp(this.configuration).searchMovieInfoPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Retuns Now Playing Movies
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieNowplayingGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieNowplayingGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Popular Movies
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMoviePopularGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMoviePopularGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Searches for a movie.
     * @param {object} [apiKey] 
     * @param {OmbiModelsSearchMovieRefineModel} [model] The refinement model, language code and year are both optional. Language code uses ISO 639-1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMoviePost(apiKey?: object, model?: OmbiModelsSearchMovieRefineModel, options?: any) {
        return SearchApiFp(this.configuration).searchMoviePost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns similar movies to the movie id passed in
     * @param {object} [apiKey] 
     * @param {OmbiModelsSimilarMoviesRefineModel} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieSimilarPost(apiKey?: object, model?: OmbiModelsSimilarMoviesRefineModel, options?: any) {
        return SearchApiFp(this.configuration).searchMovieSimilarPost(apiKey, model, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns top rated movies.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieTopratedGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieTopratedGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TheMovieDb as the Movie Provider
     * @summary Returns Upcoming movies.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMovieUpcomingGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMovieUpcomingGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Lidarr as the Provider
     * @summary Returns the album information we searched for
     * @param {string} searchTerm 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMusicAlbumBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMusicAlbumBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Lidarr as the Provider
     * @summary Returns all albums for the artist using the ForeignArtistId
     * @param {string} foreignArtistId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId: string, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMusicArtistAlbumByForeignArtistIdGet(foreignArtistId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Lidarr as the Provider
     * @summary Returns the artist information we searched for
     * @param {string} searchTerm 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchMusicArtistBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchMusicArtistBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Trakt.tv as the Provider
     * @summary Returns most Anticiplateds tv shows.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvAnticipatedGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvAnticipatedGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TvMaze as the Provider
     * @summary Searches for a Tv Show.
     * @param {string} searchTerm The search term.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvBySearchTermGet(searchTerm: string, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvBySearchTermGet(searchTerm, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use TvMaze as the Provider
     * @summary Gets extra show information.
     * @param {number} tvdbId The TVDB identifier.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvInfoByTvdbIdGet(tvdbId: number, apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvInfoByTvdbIdGet(tvdbId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Most watched shows.
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvMostwatchedGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvMostwatchedGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Trakt.tv as the Provider
     * @summary Returns Popular Tv Shows
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvPopularGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvPopularGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * We use Trakt.tv as the Provider
     * @summary Returns trending shows
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTvTrendingGet(apiKey?: object, options?: any) {
        return SearchApiFp(this.configuration).searchTvTrendingGet(apiKey, options)(this.axios, this.basePath);
    }

}
