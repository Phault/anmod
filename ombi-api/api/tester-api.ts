// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { OmbiCoreModelsUINewsletterNotificationViewModel } from '../model';
import { OmbiCoreSettingsModelsExternalEmbyServers } from '../model';
import { OmbiCoreSettingsModelsExternalPlexServers } from '../model';
import { OmbiModelsMobileNotificationTestViewModel } from '../model';
import { OmbiSettingsSettingsModelsExternalCouchPotatoSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalLidarrSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalRadarrSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalSickRageSettings } from '../model';
import { OmbiSettingsSettingsModelsExternalSonarrSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsPushbulletSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsPushoverSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings } from '../model';
import { OmbiSettingsSettingsModelsNotificationsTelegramSettings } from '../model';
/**
 * TesterApi - axios parameter creator
 * @export
 */
export const TesterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerCouchpotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/couchpotato`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalCouchPotatoSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to discord using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerDiscordPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/discord`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmailPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmbyPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalEmbyServers, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/emby`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsExternalEmbyServers" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/lidarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalLidarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to mattermost using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMattermostPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/mattermost`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsMobileNotificationTestViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMobilePost(apiKey?: object, settings?: OmbiModelsMobileNotificationTestViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/mobile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiModelsMobileNotificationTestViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerNewsletterPost(apiKey?: object, settings?: OmbiCoreModelsUINewsletterNotificationViewModel, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/newsletter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreModelsUINewsletterNotificationViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPlexPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/plex`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiCoreSettingsModelsExternalPlexServers" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushbulletPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/pushbullet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsPushbulletSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to Pushover using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushoverPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushoverSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/pushover`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsPushoverSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/radarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalRadarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSickragePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/sickrage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalSickRageSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSlackPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/slack`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/sonarr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsExternalSonarrSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sends a test message to Telegram using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerTelegramPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsTelegramSettings, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Tester/telegram`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"OmbiSettingsSettingsModelsNotificationsTelegramSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settings !== undefined ? settings : {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TesterApi - functional programming interface
 * @export
 */
export const TesterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerCouchpotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerCouchpotatoPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to discord using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerDiscordPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerDiscordPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmailPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerEmailPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmbyPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalEmbyServers, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerEmbyPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerLidarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to mattermost using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMattermostPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerMattermostPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsMobileNotificationTestViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMobilePost(apiKey?: object, settings?: OmbiModelsMobileNotificationTestViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerMobilePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerNewsletterPost(apiKey?: object, settings?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerNewsletterPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPlexPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerPlexPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushbulletPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerPushbulletPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to Pushover using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushoverPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushoverSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerPushoverPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerRadarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSickragePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerSickragePost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSlackPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerSlackPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerSonarrPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sends a test message to Telegram using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerTelegramPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsTelegramSettings, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = TesterApiAxiosParamCreator(configuration).testerTelegramPost(apiKey, settings, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TesterApi - factory interface
 * @export
 */
export const TesterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerCouchpotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any) {
            return TesterApiFp(configuration).testerCouchpotatoPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to discord using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerDiscordPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings, options?: any) {
            return TesterApiFp(configuration).testerDiscordPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message via email to the admin email using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmailPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings, options?: any) {
            return TesterApiFp(configuration).testerEmailPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Checks if we can connect to Emby with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalEmbyServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerEmbyPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalEmbyServers, options?: any) {
            return TesterApiFp(configuration).testerEmbyPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any) {
            return TesterApiFp(configuration).testerLidarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to mattermost using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMattermostPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings, options?: any) {
            return TesterApiFp(configuration).testerMattermostPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiModelsMobileNotificationTestViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerMobilePost(apiKey?: object, settings?: OmbiModelsMobileNotificationTestViewModel, options?: any) {
            return TesterApiFp(configuration).testerMobilePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [apiKey] 
         * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerNewsletterPost(apiKey?: object, settings?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any) {
            return TesterApiFp(configuration).testerNewsletterPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Checks if we can connect to Plex with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPlexPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any) {
            return TesterApiFp(configuration).testerPlexPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to Pushbullet using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushbulletPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings, options?: any) {
            return TesterApiFp(configuration).testerPushbulletPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to Pushover using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerPushoverPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushoverSettings, options?: any) {
            return TesterApiFp(configuration).testerPushoverPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Checks if we can connect to Radarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any) {
            return TesterApiFp(configuration).testerRadarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSickragePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any) {
            return TesterApiFp(configuration).testerSickragePost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to Slack using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSlackPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings, options?: any) {
            return TesterApiFp(configuration).testerSlackPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Checks if we can connect to Sonarr with the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any) {
            return TesterApiFp(configuration).testerSonarrPost(apiKey, settings, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sends a test message to Telegram using the provided settings
         * @param {object} [apiKey] 
         * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [settings] The settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testerTelegramPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsTelegramSettings, options?: any) {
            return TesterApiFp(configuration).testerTelegramPost(apiKey, settings, options)(axios, basePath);
        },
    };
};

/**
 * TesterApi - object-oriented interface
 * @export
 * @class TesterApi
 * @extends {BaseAPI}
 */
export class TesterApi extends BaseAPI {
    /**
     * 
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalCouchPotatoSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerCouchpotatoPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalCouchPotatoSettings, options?: any) {
        return TesterApiFp(this.configuration).testerCouchpotatoPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to discord using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerDiscordPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsDiscordNotificationSettings, options?: any) {
        return TesterApiFp(this.configuration).testerDiscordPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message via email to the admin email using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerEmailPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsEmailNotificationSettings, options?: any) {
        return TesterApiFp(this.configuration).testerEmailPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Checks if we can connect to Emby with the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsExternalEmbyServers} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerEmbyPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalEmbyServers, options?: any) {
        return TesterApiFp(this.configuration).testerEmbyPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalLidarrSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerLidarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalLidarrSettings, options?: any) {
        return TesterApiFp(this.configuration).testerLidarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to mattermost using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerMattermostPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsMattermostNotificationSettings, options?: any) {
        return TesterApiFp(this.configuration).testerMattermostPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiModelsMobileNotificationTestViewModel} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerMobilePost(apiKey?: object, settings?: OmbiModelsMobileNotificationTestViewModel, options?: any) {
        return TesterApiFp(this.configuration).testerMobilePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [apiKey] 
     * @param {OmbiCoreModelsUINewsletterNotificationViewModel} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerNewsletterPost(apiKey?: object, settings?: OmbiCoreModelsUINewsletterNotificationViewModel, options?: any) {
        return TesterApiFp(this.configuration).testerNewsletterPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Checks if we can connect to Plex with the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiCoreSettingsModelsExternalPlexServers} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerPlexPost(apiKey?: object, settings?: OmbiCoreSettingsModelsExternalPlexServers, options?: any) {
        return TesterApiFp(this.configuration).testerPlexPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to Pushbullet using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsPushbulletSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerPushbulletPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushbulletSettings, options?: any) {
        return TesterApiFp(this.configuration).testerPushbulletPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to Pushover using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsPushoverSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerPushoverPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsPushoverSettings, options?: any) {
        return TesterApiFp(this.configuration).testerPushoverPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Checks if we can connect to Radarr with the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalRadarrSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerRadarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalRadarrSettings, options?: any) {
        return TesterApiFp(this.configuration).testerRadarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to Slack using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalSickRageSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerSickragePost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSickRageSettings, options?: any) {
        return TesterApiFp(this.configuration).testerSickragePost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to Slack using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerSlackPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsSlackNotificationSettings, options?: any) {
        return TesterApiFp(this.configuration).testerSlackPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Checks if we can connect to Sonarr with the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsExternalSonarrSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerSonarrPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsExternalSonarrSettings, options?: any) {
        return TesterApiFp(this.configuration).testerSonarrPost(apiKey, settings, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sends a test message to Telegram using the provided settings
     * @param {object} [apiKey] 
     * @param {OmbiSettingsSettingsModelsNotificationsTelegramSettings} [settings] The settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TesterApi
     */
    public testerTelegramPost(apiKey?: object, settings?: OmbiSettingsSettingsModelsNotificationsTelegramSettings, options?: any) {
        return TesterApiFp(this.configuration).testerTelegramPost(apiKey, settings, options)(this.axios, this.basePath);
    }

}
