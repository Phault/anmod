// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Ombi Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundGet(apiKey?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/Images/background`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new RequiredError('movieDbId','Required parameter movieDbId was null or undefined when calling imagesBackgroundMovieByMovieDbIdGet.');
            }
            const localVarPath = `/api/v1/Images/background/movie/{movieDbId}`
                .replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundTvByTvdbidGet(tvdbid: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new RequiredError('tvdbid','Required parameter tvdbid was null or undefined when calling imagesBackgroundTvByTvdbidGet.');
            }
            const localVarPath = `/api/v1/Images/background/tv/{tvdbid}`
                .replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'movieDbId' is not null or undefined
            if (movieDbId === null || movieDbId === undefined) {
                throw new RequiredError('movieDbId','Required parameter movieDbId was null or undefined when calling imagesPosterMovieByMovieDbIdGet.');
            }
            const localVarPath = `/api/v1/Images/poster/movie/{movieDbId}`
                .replace(`{${"movieDbId"}}`, encodeURIComponent(String(movieDbId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterTvByTvdbidGet(tvdbid: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new RequiredError('tvdbid','Required parameter tvdbid was null or undefined when calling imagesPosterTvByTvdbidGet.');
            }
            const localVarPath = `/api/v1/Images/poster/tv/{tvdbid}`
                .replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesTvByTvdbidGet(tvdbid: number, apiKey?: object, options: any = {}): RequestArgs {
            // verify required parameter 'tvdbid' is not null or undefined
            if (tvdbid === null || tvdbid === undefined) {
                throw new RequiredError('tvdbid','Required parameter tvdbid was null or undefined when calling imagesTvByTvdbidGet.');
            }
            const localVarPath = `/api/v1/Images/tv/{tvdbid}`
                .replace(`{${"tvdbid"}}`, encodeURIComponent(String(tvdbid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("ApiKey")
                    : configuration.apiKey;
                localVarHeaderParameter["ApiKey"] = localVarApiKeyValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundGet(apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesBackgroundGet(apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesBackgroundMovieByMovieDbIdGet(movieDbId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesBackgroundTvByTvdbidGet(tvdbid, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesPosterMovieByMovieDbIdGet(movieDbId, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesPosterTvByTvdbidGet(tvdbid, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).imagesTvByTvdbidGet(tvdbid, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundGet(apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesBackgroundGet(apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesBackgroundMovieByMovieDbIdGet(movieDbId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesBackgroundTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesBackgroundTvByTvdbidGet(tvdbid, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} movieDbId 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesPosterMovieByMovieDbIdGet(movieDbId, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesPosterTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesPosterTvByTvdbidGet(tvdbid, apiKey, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} tvdbid 
         * @param {object} [apiKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagesTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
            return ImagesApiFp(configuration).imagesTvByTvdbidGet(tvdbid, apiKey, options)(axios, basePath);
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesBackgroundGet(apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesBackgroundGet(apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} movieDbId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesBackgroundMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesBackgroundMovieByMovieDbIdGet(movieDbId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} tvdbid 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesBackgroundTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesBackgroundTvByTvdbidGet(tvdbid, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} movieDbId 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesPosterMovieByMovieDbIdGet(movieDbId: string, apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesPosterMovieByMovieDbIdGet(movieDbId, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} tvdbid 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesPosterTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesPosterTvByTvdbidGet(tvdbid, apiKey, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} tvdbid 
     * @param {object} [apiKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public imagesTvByTvdbidGet(tvdbid: number, apiKey?: object, options?: any) {
        return ImagesApiFp(this.configuration).imagesTvByTvdbidGet(tvdbid, apiKey, options)(this.axios, this.basePath);
    }

}
